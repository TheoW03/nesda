#include <RomUtil.h>
#include <fstream>
#include <instruction_map.h>
// #include <instruction.h>
#include <algorithm>
#include <memory>
#include <cli.h>
// #include <util.h>
#include <map>

void sort_by_PC(std::vector<std::shared_ptr<instr>> &prg)
{

    for (int i = 0; i < prg.size(); i++)
    {
        for (int j = 0; j < prg.size() - i - 1; j++)
        {
            if (prg[j]->pc > prg[j + 1]->pc)
                std::swap(prg[j], prg[j + 1]);
        }
    }
}
std::vector<std::shared_ptr<instr>> computer(DisAsmState &state)
{
    std::vector<std::shared_ptr<instr>> disassembled_rom;

    bool end = false;

    while (!end)
    {
        // disassembles labels
        // if (state.known_lables.find(state.bus.get_pc() - 1) != state.known_lables.end() //
        // && state.assembled.find(state.bus.get_pc() - 1) == state.assembled.end())
        // {
        // disassembled_rom.push_back(std::make_shared<Label>(state.known_lables[state.bus.get_pc() - 1], state.bus.get_pc() - 1));
        // state.assembled.insert(std::make_pair(state.bus.get_pc() - 1, state.known_lables[state.bus.get_pc() - 1]));
        // state.known_lables.erase(state.bus.get_pc() - 1);
        // }
        uint8_t instr = state.bus.get_instr();

        if (instr == 0x0 || !InstructionValid(instr))
        {
            std::cout << "test" << std::endl;

            // if the instruction is a BRK,
            // or is inavlid
            // it checks the PC queue, generated by BNE, BEQ..
            // and all the interrupt vectors and sets the PC
            // to that address if and only if its not already disassembled
            auto new_pc = state.bus.get_next_queue();
            if (new_pc == 0)
            {
                // if they are no more instructions to disassemble
                // both in the queue and the next PC.
                // we assume the ROM as fully disassembled
                return disassembled_rom;
            }
            state.bus.fill_instr(new_pc);
        }
        else
        {
            auto current_instr = GetInstruction(instr);
            auto disassmble = current_instr.instructionFunction(current_instr.addressmode, state);
            disassembled_rom.push_back(disassmble);
        }
    }
    return disassembled_rom;
}

void init(NESRom nes, Output o)
{
    if (!o.output_files.has_value())
    {
        o.output_files = "./TestOutPut/Test.s";
    }

    initializeInstructionMap();

    Header h = Header(nes.header);
    uint16_t pc_start = nes.prg_rom[0xfffd - 0x8000] << 8 | nes.prg_rom[0xfffc - 0x8000];
    uint16_t nmi = nes.prg_rom[0xfffb - 0x8000] << 8 | nes.prg_rom[0xfffa - 0x8000];

    Bus bus = Bus(nes.prg_rom, pc_start);
    bus.fill_instr(pc_start);
    std::map<uint16_t, std::string> known_lables;
    std::map<uint16_t, std::string> assembled;

    known_lables[pc_start] = "reset";
    known_lables[nmi] = "nmi";

    DisAsmState dis = {bus, known_lables, assembled, 0};

    dis.bus.add_to_queue(nmi);

    auto prg = computer(dis);
    for (const auto &pair : dis.known_lables)
    {
        uint16_t pc = pair.first;
        std::string n = pair.second;
        prg.push_back(std::make_shared<Label>(n, pc));
    }

    sort_by_PC(prg);

    if (o.print_file)
    {
        std::cout << h.disassm() << std::endl;
        std::cout << ".SEGMENT \"VECTORS\"" << std::endl;

        std::cout << "      .addr reset" << std::endl;

        std::cout << "      .addr nmi" << std::endl;

        for (int i = 0; i < prg.size(); i++)
        {
            std::cout << prg[i]->disassm();
        }
        std::cout << ".SEGMENT \"CHARS\" " << std::endl;
        if (o.chr_file.has_value())
            std::cout << ".incbin  \"" << o.chr_file.value() << "\" \n";
    }
    if (o.output_files.has_value())
    {

        std::ofstream outputFile(o.output_files.value());
        outputFile << h.disassm();
        outputFile << ".SEGMENT \"VECTORS\"";
        outputFile << ".addr reset \n";
        outputFile << ".addr nmi \n";
        outputFile << ".SEGMENT \"STARTUP\" \n";
        for (int i = 0; i < prg.size(); i++)
        {
            outputFile << prg[i]->disassm();
        }
        outputFile << ".SEGMENT \"CHARS\" \n";

        if (o.print_file && o.chr_file.has_value())
        {
            outputFile << ".incbin  \"" << o.chr_file.value() << "\" ; the sprites \n";
        }

        outputFile.close();
    }
    if (o.chr_file.has_value())
    {
        std::ofstream outputFile(o.chr_file.value());
        for (int i = 0; i < nes.chr_rom.size(); i++)
        {
            outputFile << nes.chr_rom[i];
        }
        outputFile.close();
    }
}